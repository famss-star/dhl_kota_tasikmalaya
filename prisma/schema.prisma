generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String?
  password   String
  role       UserRole    @default(USER)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  articles   Article[]
  complaints Complaint[]
  news       News[]

  @@map("users")
}

model Article {
  id          String           @id @default(cuid())
  title       String
  slug        String           @unique
  content     String
  excerpt     String?
  thumbnail   String?
  tags        String?
  isPublished Boolean          @default(false)
  publishedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  authorId    String
  categoryId  String?
  category    ArticleCategory? @relation(fields: [categoryId], references: [id])
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("articles")
}

model ArticleCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]

  @@map("article_categories")
}

model News {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  thumbnail   String?
  tags        String?
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("news")
}

model Document {
  id            String           @id @default(cuid())
  title         String
  description   String?
  filename      String
  filepath      String
  filesize      Int
  mimetype      String
  category      DocumentCategory
  isPublic      Boolean          @default(true)
  downloadCount Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("documents")
}

model PermitApplication {
  id             String             @id @default(cuid())
  applicationNo  String             @unique
  applicantName  String
  applicantEmail String
  applicantPhone String
  companyName    String?
  permitType     PermitType
  description    String
  status         ApplicationStatus  @default(PENDING)
  submittedAt    DateTime           @default(now())
  processedAt    DateTime?
  completedAt    DateTime?
  notes          String?
  attachments    PermitAttachment[]

  @@map("permit_applications")
}

model PermitAttachment {
  id            String            @id @default(cuid())
  filename      String
  filepath      String
  filesize      Int
  mimetype      String
  uploadedAt    DateTime          @default(now())
  applicationId String
  application   PermitApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("permit_attachments")
}

model Complaint {
  id               String                @id @default(cuid())
  complainantName  String
  complainantEmail String
  complainantPhone String?
  subject          String
  description      String
  location         String?
  status           ComplaintStatus       @default(OPEN)
  priority         Priority              @default(MEDIUM)
  submittedAt      DateTime              @default(now())
  responseAt       DateTime?
  resolvedAt       DateTime?
  response         String?
  assignedToId     String?
  attachments      ComplaintAttachment[]
  assignedTo       User?                 @relation(fields: [assignedToId], references: [id])

  @@map("complaints")
}

model ComplaintAttachment {
  id          String    @id @default(cuid())
  filename    String
  filepath    String
  filesize    Int
  mimetype    String
  uploadedAt  DateTime  @default(now())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  @@map("complaint_attachments")
}

model GalleryPhoto {
  id          String   @id @default(cuid())
  title       String
  description String?
  filename    String
  filepath    String
  filesize    Int
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gallery_photos")
}

model GalleryVideo {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  thumbnail   String?
  duration    Int?
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gallery_videos")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  isPublic    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("events")
}

model Agenda {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  location     String
  startDate    DateTime
  endDate      DateTime
  startTime    String
  endTime      String?
  organizer    String
  participants Int          @default(0)
  tags         String?
  status       AgendaStatus @default(UPCOMING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("agendas")
}

model SiteSetting {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  type        SettingType @default(STRING)
  label       String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("site_settings")
}

model StaffMember {
  id               String           @id @default(cuid())
  name             String
  position         String
  photo            String?
  type             StaffType
  employmentStatus EmploymentStatus
  education        EducationLevel
  rank             String?
  birthDate        DateTime?
  isActive         Boolean          @default(true)
  isPublished      Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  greeting         String?
  careerHistory    CareerHistory[]

  @@map("staff_members")
}

model CareerHistory {
  id            String       @id @default(cuid())
  position      String
  institution   String
  startDate     DateTime
  endDate       DateTime?
  description   String?
  isActive      Boolean      @default(false)
  isPublished   Boolean      @default(false)
  staffMemberId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  staffMember   StaffMember? @relation(fields: [staffMemberId], references: [id], onDelete: Cascade)

  @@map("career_history")
}

model CarouselItem {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  description String
  imageUrl    String
  linkUrl     String?
  linkText    String?
  order       Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("carousel_items")
}

model HomepageSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("text")
  category    String   @default("general")
  description String?
  order       Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("homepage_settings")
}

model LayananCard {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  linkUrl     String
  category    String   @default("perizinan")
  color       String   @default("green")
  order       Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("layanan_cards")
}

model ContactSetting {
  id        String   @id @default(cuid())
  type      String
  label     String
  value     String
  icon      String?
  url       String?
  order     Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_settings")
}

model Bidang {
  id               String   @id @default(cuid())
  slug             String   @unique
  name             String
  aboutTitle       String
  aboutDescription String
  tugasPokokTitle  String
  tugasPokok       String
  fungsiTitle      String
  fungsi           String
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("bidang")
}

model EmployeeStatistic {
  id          String   @id @default(cuid())
  category    String
  subcategory String
  count       Int
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, subcategory])
  @@map("employee_statistics")
}

enum UserRole {
  ADMIN
  USER
  OPERATOR
}

enum DocumentCategory {
  REGULATION
  SOP
  FORM
  REPORT
  OTHER
}

enum PermitType {
  AMDAL
  UKL_UPL
  SPPL
  IPLC
  GENERAL
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

enum ComplaintStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AgendaStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum StaffType {
  KEPALA_DINAS
  WAKIL
  SEKRETARIS
  KABID
  STAFF
}

enum EmploymentStatus {
  PNS
  PPPK
  HONORER
}

enum EducationLevel {
  SMP
  SMA_SMK
  DIPLOMA
  S1
  S2
  S3
}
